#!/usr/bin/env python

import argparse
import os.path
import glob

def _read_logs(directory, algorithm):
    if not os.path.isdir(directory):
        raise RuntimeError('Could not find directory '+directory)
    filenames = glob.glob(directory+'/result.'+algorithm+'.*')
    timings = dict()
    num_lines = None
    for f in filenames:
        method = f.split('.')[-1]
        msg_sizes = []
        times = []
        for line in open(f):
            size = int(line.split()[-6])
            msg_sizes.append(size)
            time = float(line.split()[-2])
            times.append(time)
        if num_lines is None:
            num_lines = len(times)
        if len(times) != num_lines:
            raise RuntimeError('Number of results don\'t match across files')
        timings[method] = times
    return [msg_sizes, timings]


def _print_csv_table(table):
    msg_sizes = table[0]
    timings = table[1]
    header = ['# size(bytes)']
    for k in timings:
        header.append(k+'(sec)')
    print(', '.join(header))
    for i in range(0, len(msg_sizes)):
        line = [str(msg_sizes[i])]
        for k in timings:
            line.append(str(timings[k][i]))
        print(', '.join(line))


def _print_md_table(table):
    msg_sizes = table[0]

    timings = table[1]
    header = ['size (bytes)']
    rule = ['------------']
    for k in timings:
        header.append(k+' (sec)')
        rule.append(rule[0])
    for i in range(0, len(header)):
        header[i] += ' ' * (12 - len(header[i]))
    print('| '+' | '.join(header)+' |')
    print('| '+' | '.join(rule)+' |')
    for i in range(0, len(msg_sizes)):
        line = [str(msg_sizes[i])]
        line[-1] += ' ' * (12 - len(line[-1]))
        for k in timings:
            line.append(str(timings[k][i]))
            line[-1] += ' ' * (12 - len(line[-1]))
        print('| '+' | '.join(line)+' |')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process the logs of MoNA experiments')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-c', '--csv', action='store_true', help='Produce CSV data')
    group.add_argument('-m', '--md', action='store_true', help='Produce Markdown table')
    parser.add_argument('directory', type=str, help='Directory containing the logs')
    parser.add_argument('algorithm', type=str, help='Algorithm of interest')
    ns = parser.parse_args()
    table = _read_logs(ns.directory, ns.algorithm)
    if ns.csv:
        _print_csv_table(table)
    elif ns.md:
        _print_md_table(table)
